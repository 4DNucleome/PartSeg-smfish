[build-system]
requires = ["setuptools>=71.0.0", "setuptools_scm"]
build-backend = "setuptools.build_meta"

[project]
name = "PartSeg-smfish"
description = "PartSeg and napari plugin for smfish data"
readme = {file = "README.md", content-type = "text/markdown"}
requires-python = ">=3.10"
license = {text = "BSD-3-Clause"}
authors = [
    {name = "Grzegorz Bokota", email = "g.bokota@cent.uw.edu.pl"}
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Framework :: napari",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: BSD License",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Scientific/Engineering :: Image Processing",
]
dependencies = [
    "PartSeg>=0.16.0",
    "numpy",
    "napari",
    "qtpy",
]
dynamic = ["version"]

[project.urls]
"Homepage" = "https://github.com/4DNucleome/PartSeg-smfish"
"Bug Tracker" = "https://github.com/4DNucleome/PartSeg-smfish/issues"
"Documentation" = "https://github.com/4DNucleome/PartSeg-smfish#README.md"
"Source Code" = "https://github.com/4DNucleome/PartSeg-smfish"
"User Support" = "https://github.com/4DNucleome/PartSeg-smfish/issues"

[project.optional-dependencies]
testing = [
    "tox",
    "pytest",
    "pytest-cov",
    "pytest-qt",
]

[project.entry-points."napari.manifest"]
"PartSeg-smfish" = "PartSeg_smfish:napari.yaml"

[project.entry-points."partsegcore.plugins"]
"smFISH helpers" = "PartSeg_smfish"

[tool.setuptools]
package-dir = {"" = "src"}
include-package-data = true

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
"*" = ["*.yaml"]

[tool.setuptools_scm]
write_to = "src/PartSeg_smfish/_version.py"

[tool.ruff]
line-length = 79
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".mypy_cache",
    ".pants.d",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "*vendored*",
    "*_vendor*",
]

fix = true

[tool.ruff.format]
quote-style = "double"

[tool.ruff.lint]
select = [
    "E", "F", "W", #flake8
    "UP", # pyupgrade
    "I", # isort
    "YTT", #flake8-2020
    "TC", # flake8-type-checing
    "BLE", # flake8-blind-exception
    "B", # flake8-bugbear
    "A", # flake8-builtins
    "C4", # flake8-comprehensions
    "ISC", # flake8-implicit-str-concat
    "G", # flake8-logging-format
    "PIE", # flake8-pie
    "COM", # flake8-commas
    "SIM", # flake8-simplify
    "INP", # flake8-no-pep420
    "PYI", # flake8-pyi
    "Q", # flake8-quotes
    "RSE", # flake8-raise
    "RET", # flake8-return
    "TID",  # flake8-tidy-imports # replace absolutify import
    "TRY", # tryceratops
    "ICN", # flake8-import-conventions
    "RUF", # ruff specyfic rules
    "NPY201", # checks compatibility with numpy version 2.0
    "ASYNC", # flake8-async
    "EXE", # flake8-executable
    "FA", # flake8-future-annotations
    "LOG", # flake8-logging
    "SLOT", # flake8-slots
    "PT", # flake8-pytest-style
    "T20", # flake8-print
]
ignore = [
    "COM812", # conflict with formatter
]

[tool.ruff.lint.pyupgrade]
keep-runtime-typing = true


[tool.ruff.lint.flake8-quotes]
docstring-quotes = "double"
inline-quotes = "double"
multiline-quotes = "double"

[tool.ruff.lint.isort]
known-first-party=['PartSeg_smfish']
combine-as-imports = true
